name: Development Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        modules: 'qtwebsockets qtmultimedia qtconnectivity'
        version: 6.2.4

    - name: Install GStreamer
      run: |
        sudo apt-get update
        sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

    - name: Install CQTDeployer
      run: |
        sudo snap install cqtdeployer
        sudo snap connect cqtdeployer:process-control
        sudo snap connect cqtdeployer:removable-media
        sudo snap connect cqtdeployer:system-backup

    - name: Build
      run: | 
        qmake CONFIG+=debug
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make

    - name: Deploy debug version
      run: cqtdeployer -bin OpenMicServer

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: LinuxBuild
        path: DistributionKit/

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  build_windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        modules: 'qtwebsockets qtmultimedia qtconnectivity'
        version: 6.2.4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        queries: security-and-quality
        languages: "cpp"
        source-root: src

    - name: Build
      shell: cmd
      run: |
        qmake CONFIG+=debug
        nmake

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Deploy debug version
      shell: cmd
      run: |
        mkdir out
        copy debug\OpenMicServer.exe out\OpenMicServer.exe
        windeployqt out\OpenMicServer.exe

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: WindowsBuild
        path: out
